"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function lt(a, b) {
    return a < b;
}
exports.lt = lt;
;
function le(a, b) {
    return a <= b;
}
exports.le = le;
;
function eq(a, b) {
    return a == b;
}
exports.eq = eq;
;
function ne(a, b) {
    return a != b;
}
exports.ne = ne;
;
function ge(a, b) {
    return a >= b;
}
exports.ge = ge;
;
function gt(a, b) {
    return a > b;
}
exports.gt = gt;
;
function is(a, b) {
    return a === b;
}
exports.is = is;
;
function isnt(a, b) {
    return a !== b;
}
exports.isnt = isnt;
;
/**
 * Logical
 * =======
 */
function isIn(a, obj) {
    return a in obj;
}
exports.isIn = isIn;
function not(obj) {
    return !(obj);
}
exports.not = not;
;
function truth(obj) {
    return !!(obj);
}
exports.truth = truth;
;
function and(a, b) {
    return a && b;
}
exports.and = and;
;
function or(a, b) {
    return a || b;
}
exports.or = or;
;
/**
 * Arithmetic
 * ==========
 */
function add(a, b) {
    return (+a) + (+b);
}
exports.add = add;
;
function sub(a, b) {
    return a - b;
}
exports.sub = sub;
;
function mul(a, b) {
    return a * b;
}
exports.mul = mul;
;
function div(a, b) {
    return a / b;
}
exports.div = div;
;
function floordiv(a, b) {
    return Math.floor(a / b);
}
exports.floordiv = floordiv;
;
function divmod(a, b) {
    return [floordiv(a, b), a % b];
}
exports.divmod = divmod;
;
function mod(a, b) {
    return a % b;
}
exports.mod = mod;
;
function pos(obj) {
    return +obj;
}
exports.pos = pos;
;
function neg(obj) {
    return -obj;
}
exports.neg = neg;
;
/**
 * Bitwise
 * =======
 */
function and_(a, b) {
    return a & b;
}
exports.and_ = and_;
;
function or_(a, b) {
    return a | b;
}
exports.or_ = or_;
;
function invert(a) {
    return ~a;
}
exports.invert = invert;
;
function xor(a, b) {
    return a ^ b;
}
exports.xor = xor;
;
function lshift(a, b) {
    return a << b;
}
exports.lshift = lshift;
;
function rshift(a, b) {
    return a >> b;
}
exports.rshift = rshift;
;
/**
 * Indexing
 * ========
 */
function set(obj, k, v) {
    var len = arguments.length;
    if (len < 2 || len > 4)
        return; //perhaps throw error?
    switch (len) {
        case 2:
            if (typeof k === 'object') {
                for (var i in k)
                    if (k.hasOwnProperty(i)) {
                        obj[i] = k[i];
                    }
                // break so fall-through sets obj[k] = undef
                break;
            }
        case 3:
            obj[k] = v; //What if typeof k is object?
            break;
    }
    return obj;
}
exports.set = set;
;
function del(obj, k) {
    if (typeof k === 'object') {
        for (var i in k)
            if (k.hasOwnProperty(i)) {
                delete obj[k[i]];
            }
    }
    else {
        delete obj[k];
    }
    return obj;
}
exports.del = del;
;
function get(obj, k) {
    if (typeof k === 'object') {
        if (k.length && k[0]) {
            for (var i = 0; i < k.length; i++) {
                k[i] = obj[k[i]];
            }
        }
        else {
            for (var j in k)
                if (k.hasOwnProperty(j)) {
                    k[i] = obj[j];
                }
        }
        return k;
    }
    return obj[k];
}
exports.get = get;
;
/**
 * Returns the value of the dictionary at the specified key; if the key does
 * not yet exist in the dictionary and a default value function is provided,
 * it will be invoked and its value will be both assigned to the dictionary
 * at the specified key and returned to the caller.
 *
 * @param obj
 * Dictionary object or array
 *
 * @param k
 * Index value
 *
 * @param defval
 * (Optional) Function which returns a default value if that of the
 * dictionary mapped to by the key is not yet defined.
 *
 * @return
 * The value of the dictionary mapped to by the key or the default value
 * returned by the function if the dictionary does not contain the key.
 */
function getdef(obj, k, defval) {
    var val = obj[k];
    if ((val === undefined) && defval) {
        val = obj[k] = defval();
    }
    return val;
}
exports.getdef = getdef;
;
/**
 * Other
 * =====
 */
function concat(a, b) {
    return a + b;
}
exports.concat = concat;
